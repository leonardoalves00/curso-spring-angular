package com.leonardo.curso.rest;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.fasterxml.jackson.annotation.JacksonInject.Value;
import com.leonardo.curso.model.modelentity.Cliente;
import com.leonardo.curso.model.modelentity.ServicoPrestado;
import com.leonardo.curso.model.repository.ClienteRepository;
import com.leonardo.curso.model.repository.ServicoPrestadoRepository;
import com.leonardo.curso.rest.dto.ServicoPestadoDTO;
import com.leonardo.curso.util.BigDecimalConverter;


import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/servicos-prestados")
@RequiredArgsConstructor
public class ServicoPrestadoController {
	
	private final ClienteRepository clienteRepository;
	private final ServicoPrestadoRepository servicoRepository;
	private final BigDecimalConverter bigDecimalConverter;
	
	@PostMapping
	public ServicoPrestado salvar( @RequestBody ServicoPestadoDTO dto ) {
		
		//tratamento de data
		LocalDate data = LocalDate.parse(dto.getData(), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		Integer idCliente = dto.getIdCliente();
		
		//passando cliente
		Cliente cliente = clienteRepository
				.findById(idCliente)
				.orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST,"Clique inexistente.") );
		
		 
		ServicoPrestado servicoPrestado = new ServicoPrestado();
		servicoPrestado.setDescricao(dto.getDescricao() );
		servicoPrestado.setData(data);
		servicoPrestado.setCliente(cliente);
		servicoPrestado.setValor(bigDecimalConverter.converterBD(dto.getPreco() ));
		
		return servicoRepository.save(servicoPrestado);
	}

}
